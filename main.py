import os
import numpy
from sklearn.feature_extraction import FeatureHasher
from sklearn.ensemble import RandomForestClassifier
import pickle
import random
from sklearn import metrics
from matplotlib import pyplot
from sklearn.metrics import f1_score
from sklearn.model_selection import KFold


def pecheck(filename):
    f = open(filename, "rb")
    bytes = f.read(2)
    return bytes == b'MZ'


def get_string_features(filename, min_length, hasher):

    string_features = {}
    strings = os.popen("strings '{0}'".format(filename)).read()
    strings = list(set(strings.split("\n")))

    for str in strings:
        if len(str) >= min_length:
            string_features[str] = 1

    # return string_features
    # compression
    hashed_features = hasher.transform([string_features])
    hashed_features = hashed_features.todense()
    hashed_features = numpy.asarray(hashed_features)
    hashed_features = hashed_features[0]

    return hashed_features

hasher = FeatureHasher(n_features=1000)

benignware_paths = []
for root, dirs, paths in os.walk('./data/benignware'):
    for path in paths:
        full_path = os.path.join(root, path)
        if pecheck(full_path):
            benignware_paths.append(full_path)

malware_paths = []
for root, dirs, paths in os.walk('./data/malware'):
    for path in paths:
        full_path = os.path.join(root, path)
        if pecheck(full_path):
            malware_paths.append(full_path)

X = [get_string_features(filename, 3, hasher) for filename in malware_paths + benignware_paths]
y = [1 for i in range(len(malware_paths))] + [0 for i in range(len(benignware_paths))]

X, y = numpy.array(X), numpy.array(y)
indicies = [i for i in range(len(y))]
random.shuffle(indicies)
X, y = X[indicies], y[indicies]

kfold = KFold(n_splits=10)
for indicies_training, indicies_test in kfold.split(indicies):
    training_X, training_y = X[list(indicies_training)], y[list(indicies_training)]
    test_X, test_y = X[list(indicies_test)], y[list(indicies_test)]

    classifier = RandomForestClassifier()
    classifier.fit(training_X, training_y)

    scores = classifier.predict_proba(test_X)[:,-1]

    y_pred = [0 if s < 0.5 else 1 for s in scores]
    f1 = f1_score(test_y, y_pred)

    print(f1)

